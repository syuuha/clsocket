[220209]
1. use shorter marco
2. other fix

[220208-3]
1. client remove send_exitKey, for windows server's bug? will exit all server's client_thread.

[220208-2]
1. add readConfigFile.cpp & conf.ini
2. server&client use conf.ini to get ip/port/exitKey
3. use macro for windows method : gettid, sleep, usleep
4. use macro for win64 : long long i
5. add fflush to fix windows's Git shell's printf problem : printf("log\r\n"); fflush(stdout);

[220208]
1. client remove pthread_detach(pthread_self());  to use pthread_join
2. client add exitKey to quit
3. server&client add pClient->GetSocketError() after pClientSocket->Receive() to avoid crash
4. server&client use close_app(0) to exit

[220207-2]
1. add thread for client

[220207]
1. CMakeLists.txt : 
  add debug for gdb : set(CMAKE_BUILD_TYPE "DEBUG")
  cmd : ulimit -c 1024
        gdb bin_name dump_core

2. example rename : 
  server(with client_thread) & client


[220127] first fix.

https://github.com/DFHack/clsocket/tree/master

[CMakeLists.txt]
1.对win, 设置C编译器, 设置C++编译器.  在Git窗口,mingw64编译.
    if(WIN32)
    set(CMAKE_C_COMPILER "gcc")
    set(CMAKE_CXX_COMPILER "g++")
    endif()

2.移动public文件到inc目录
    inc/ActiveSocket.h
    inc/PassiveSocket.h
    inc/SimpleSocket.h
    inc/StatTimer.h

3.CLSOCKET_EXAMPLES处,  CLSOCKET_EXAMPLES=ON 开启关闭选项

4.最后增加TestServer, TestClient两个测试代码

[编译命令]
linux:
    cmake -DCLSOCKET_EXAMPLES=ON .    (开启官方sample)
    或 cmake .
    make

windows:
    cmake -DCLSOCKET_EXAMPLES=ON -G "MinGW Makefiles" .    (开启官方sample)
    或 cmake -G "MinGW Makefiles" .
    make

[代码]
1. CSimpleSocket::Close(void)处, 添加WSACleanup();

2. 改TestServer.cpp, 作为linux server

3. 改TestClient.cpp, 作为windows client




------------------------------------------------------------------------------------------
* History
------------------------------------------------------------------------------------------
Written by Mark Carrier to provide a mechanism for writing cross platform socket code. This library was originally written to only support blocking TCP sockets. Over the years it has been extended to support UDP and RAW sockets as well. This is the first official release of the library and the following functionality is supported:

    * Cross platform socket support.
          o Windows 95, Windows 98, Windows XP
          o Linux, Unix
          o Macintosh OSX
    * Support for sychronious, and asychronious sockets
    * Supports TCP Streams
    * Supports UDP Datagrams
    * Supports Raw Sockets
    * Thread Safe
    * Signal Safe

------------------------------------------------------------------------------------------
* Building and Installing	
------------------------------------------------------------------------------------------
This is a very small library and is very easy to build and configure.  To build and install
make sure you are logged in as a user who has access to the recommend GNU installation 
directories. Then type

make -BUILD=Release && make install

That is it now you are off and running.

NOTE: When using the library with WINDOWS you must define _WIN32 and when using with LINUX
      you must define _LINUX.

------------------------------------------------------------------------------------------
* SimpleSocket Class Overview
------------------------------------------------------------------------------------------
Network communications via sockets can be abstracted into two categories of functionality; the active socket and the passive socket. The active socket object initiates a connection with a known host, whereas the passive socket object waits (or listens) for inbound requests for communication. The functionality of both objects is identical as far as sending and receiving data. This library makes distinction between the two objects because the operations for constructing and destructing the two are different.

This library is different from other socket libraries which define TCP sockets, UDP sockets, HTTP sockets, etc. The reason is the operations required for TCP, UDP, and RAW network communication is identical from a logical stand point. Thus a program could initially be written employing TCP streams, and then at some future point it could be discovered that UDP datagrams would satisify the solution. Changing between the two transport protocols would only require changing how the object is instantiated. The remaining code would in theory require minimal to no changes.

This library avoids abstractions like HTTP socket, or SMTP socket, soley because this type of object mixes the application and the transport layer. These types of abstractions can be created using this library as a base class.

The simple socket library is comprised of two class which can be used to represent all socket communications.

    * Active Socket Class
    * Passive Socket Class 


------------------------------------------------------------------------------------------
* SimpleSocket Class Examples
------------------------------------------------------------------------------------------
When operating on a socket object most methods will return true or false
Simple Active Socket
As mentioned previously the active socket (CActiveSocket) is used to initiate a connections with a server on some known port. So you want to connect to an existing server...

How do you do it?

There are many ways using the existing Berkley Socket API, but the goal of this class is to remove the many calls and man page lookups and replace them with clear, concise set of methods which allow a developer to focus on the logic of network programming.

The following code will connect to a DAYTIME server on port 13, query for the current time, and close the socket.

#include <string.h>
#include "ActiveSocket.h"       // Include header for active socket object definition

int main(int argc, char **argv)
{
    CActiveSocket socket;       // Instantiate active socket object (defaults to TCP).
    char          time[50];

    memset(&time, 0, 50);

    //--------------------------------------------------------------------------
    // Initialize our socket object 
    //--------------------------------------------------------------------------
    socket.Initialize();

    //--------------------------------------------------------------------------
    // Create a connection to the time server so that data can be sent
    // and received.
    //--------------------------------------------------------------------------
    if (socket.Open("time-C.timefreq.bldrdoc.gov", 13))
    {
        //----------------------------------------------------------------------
        // Send a requtest the server requesting the current time.
        //----------------------------------------------------------------------
        if (socket.Send((const uint8 *)"\n", 1))
        {
            //----------------------------------------------------------------------
            // Receive response from the server.
            //----------------------------------------------------------------------
            socket.Receive(49);
            memcpy(&time, socket.GetData(), 49);
            printf("%s\n", time);

            //----------------------------------------------------------------------
            // Close the connection.
            //----------------------------------------------------------------------
            socket.Close();
        }
    }


    return 1;
}

You can see that the amount of code required to an object for network communciation is very small and simple.
Simple Passive Socket
Now you want to build a server.

How do you do it?

For a practical test lets build an echo server. The server will listen on port 6789 an repsond back with what ever has been sent to the server.

#include "PassiveSocket.h"       // Include header for active socket object definition

#define MAX_PACKET 4096 

int main(int argc, char **argv)
{
    CPassiveSocket socket;
    CActiveSocket *pClient = NULL;

    //--------------------------------------------------------------------------
    // Initialize our socket object 
    //--------------------------------------------------------------------------
    socket.Initialize();

    socket.Listen("127.0.0.1", 6789);

    while (true)
    {
        if ((pClient = socket.Accept()) != NULL)
        {
            //----------------------------------------------------------------------
            // Receive request from the client.
            //----------------------------------------------------------------------
            if (pClient->Receive(MAX_PACKET))
            {
                //------------------------------------------------------------------
                // Send response to client and close connection to the client.
                //------------------------------------------------------------------
                pClient->Send( pClient->GetData(), pClient->GetBytesReceived() );
                pClient->Close();
            }

            delete pClient;
        }
    }

    //-----------------------------------------------------------------------------
    // Receive request from the client.
    //-----------------------------------------------------------------------------
    socket.Close();

    return 1;
}
